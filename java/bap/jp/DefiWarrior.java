package bap.jp;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class DefiWarrior extends Contract {
    public static final String BINARY = "6080604052600a6013553480156200001657600080fd5b506040516200322e3803806200322e83398101604081905262000039916200032d565b8181620000566301ffc9a760e01b6001600160e01b03620001cf16565b620000716380ac58cd60e01b6001600160e01b03620001cf16565b6200008c63780e9d6360e01b6001600160e01b03620001cf16565b8151620000a190600c9060208501906200022f565b508051620000b790600d9060208401906200022f565b50620000d3635b5e139f60e01b6001600160e01b03620001cf16565b5060009050620000eb6001600160e01b036200022a16565b601080546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350506014602052507f4f26c3876aa9f4b92579780beea1161a61f87ebf1ec6ee865b299e447ecba99c8054600160ff1991821681179092557fb6c61a840592cc84133e4b25bd509abf4659307c57b160799b38490a5aa48f2c805482168317905560026000527fa1930aa930426c54c34daad2b9ada7c5d0ef0c96078a3c5bb79f6fa6602c4a7a8054909116909117905562000479565b6001600160e01b03198082161415620002055760405162461bcd60e51b8152600401620001fc90620003d6565b60405180910390fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b335b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200027257805160ff1916838001178555620002a2565b82800160010185558215620002a2579182015b82811115620002a257825182559160200191906001019062000285565b50620002b0929150620002b4565b5090565b6200022c91905b80821115620002b05760008155600101620002bb565b600082601f830112620002e357600080fd5b8151620002fa620002f48262000415565b620003ee565b915080825260208301602083018583830111156200031757600080fd5b6200032483828462000446565b50505092915050565b600080604083850312156200034157600080fd5b82516001600160401b038111156200035857600080fd5b6200036685828601620002d1565b92505060208301516001600160401b038111156200038357600080fd5b6200039185828601620002d1565b9150509250929050565b6000620003aa601c836200043d565b7f4552433136353a20696e76616c696420696e7465726661636520696400000000815260200192915050565b60208082528101620003e8816200039b565b92915050565b6040518181016001600160401b03811182821017156200040d57600080fd5b604052919050565b60006001600160401b038211156200042c57600080fd5b506020601f91909101601f19160190565b90815260200190565b60005b838110156200046357818101518382015260200162000449565b8381111562000473576000848401525b50505050565b612da580620004896000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c806375a51b4811610125578063b88d4fde116100ad578063d83a4bc91161007c578063d83a4bc914610464578063e614751814610477578063e985e9c51461048a578063f2fde38b1461049d578063f887ea40146104b057610211565b8063b88d4fde14610405578063c0d7865514610418578063c87b56dd1461042b578063d05dcc6a1461043e57610211565b80638da5cb5b116100f45780638da5cb5b146103d25780638f32d59b146103da57806395d89b41146103e2578063a22cb465146103ea578063a53225c0146103fd57610211565b806375a51b481461036c5780638462151c1461037f578063856dc78e1461039f5780638a820a44146103bf57610211565b806340c10f19116101a85780634f6ccce7116101775780634f6ccce7146103235780636352211e146103365780636c0360eb1461034957806370a0823114610351578063715018a61461036457610211565b806340c10f19146102d757806342842e0e146102ea57806342966c68146102fd5780634ae55d1d1461031057610211565b806318160ddd116101e457806318160ddd146102895780631ab729ce1461029e57806323b872dd146102b15780632f745c59146102c457610211565b806301ffc9a71461021657806306fdde031461023f578063081812fc14610254578063095ea7b314610274575b600080fd5b610229610224366004611fc2565b6104b8565b6040516102369190612a35565b60405180910390f35b6102476104db565b6040516102369190612a43565b610267610262366004611ffe565b610572565b60405161023691906129c1565b610287610282366004611f50565b6105be565b005b6102916106a3565b6040516102369190612be4565b6102916102ac366004611f50565b6106a9565b6102876102bf366004611e5a565b6106c6565b6102916102d2366004611f50565b610703565b6102916102e5366004611f50565b610764565b6102876102f8366004611e5a565b610944565b61028761030b366004611ffe565b61095f565b61028761031e366004611f50565b610992565b610291610331366004611ffe565b610a17565b610267610344366004611ffe565b610a5e565b610247610a93565b61029161035f366004611e02565b610af4565b610287610b3d565b61028761037a366004611f50565b610bab565b61039261038d366004611e02565b610c33565b6040516102369190612a24565b6103b26103ad366004611f80565b610cca565b6040516102369190612a13565b6102876103cd36600461201c565b610dbd565b610267610e01565b610229610e10565b610247610e36565b6102876103f8366004611f20565b610e97565b610267610f65565b610287610413366004611ea7565b610f74565b610287610426366004611e02565b610fb3565b610247610439366004611ffe565b610ff9565b61045161044c366004611ffe565b611107565b6040516102369796959493929190612bf2565b610287610472366004611ffe565b611156565b610287610485366004611e02565b61117f565b610229610498366004611e20565b6111c5565b6102876104ab366004611e02565b6111f3565b610267611220565b6001600160e01b0319811660009081526020819052604090205460ff165b919050565b600c8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105675780601f1061053c57610100808354040283529160200191610567565b820191906000526020600020905b81548152906001019060200180831161054a57829003601f168201915b505050505090505b90565b600061057d8261122f565b6105a25760405162461bcd60e51b815260040161059990612b14565b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b60006105c982610a5e565b9050806001600160a01b0316836001600160a01b031614156105fd5760405162461bcd60e51b815260040161059990612b64565b806001600160a01b031661060f61124c565b6001600160a01b0316148061062b575061062b8161049861124c565b6106475760405162461bcd60e51b815260040161059990612ad4565b60008281526005602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600a5490565b600160209081526000928352604080842090915290825290205481565b6106d76106d161124c565b82611250565b6106f35760405162461bcd60e51b815260040161059990612b84565b6106fe8383836112d5565b505050565b600061070e83610af4565b821061072c5760405162461bcd60e51b815260040161059990612a54565b6001600160a01b038316600090815260086020526040902080548390811061075057fe5b906000526020600020015490505b92915050565b6011546000906001600160a01b031633146107915760405162461bcd60e51b815260040161059990612bd4565b60008281526014602052604090205460ff166107bf5760405162461bcd60e51b815260040161059990612b74565b60006107c96106a3565b90506107d584826112f4565b6001600160a01b03841660009081526001602081815260408084208785529091528220805490910190556401000000004206905060036040518060e001604052808681526020016013548463ffffffff168161082d57fe5b068152602001603263ffffffff85160660640163ffffffff16815260200160198463ffffffff168161085b57fe5b0660320163ffffffff16815260200160638463ffffffff168161087a57fe5b06603363ffffffff8616060163ffffffff168152602001604c8463ffffffff16816108a157fe5b06604a63ffffffff8616060163ffffffff168152602001426040516020016108c991906129ac565b60408051808303601f190181529181528151602092830120909252835460018082018655600095865294829020845160079092020190815590830151938101939093558101516002830155606081015160038301556080810151600483015560a0810151600583015560c00151600690910155509392505050565b6106fe83838360405180602001604052806000815250610f74565b61096a6106d161124c565b6109865760405162461bcd60e51b815260040161059990612bc4565b61098f81611312565b50565b6012546001600160a01b031633146109bc5760405162461bcd60e51b815260040161059990612bb4565b60008181526014602052604090205460ff166109ea5760405162461bcd60e51b815260040161059990612ac4565b6001600160a01b03909116600090815260026020908152604080832093835292905220805460ff19169055565b6000610a216106a3565b8210610a3f5760405162461bcd60e51b815260040161059990612b94565b600a8281548110610a4c57fe5b90600052602060002001549050919050565b6000818152600460205260408120546001600160a01b03168061075e5760405162461bcd60e51b815260040161059990612af4565b600e8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105675780601f1061053c57610100808354040283529160200191610567565b60006001600160a01b038216610b1c5760405162461bcd60e51b815260040161059990612ae4565b6001600160a01b038216600090815260066020526040902061075e90611324565b610b45610e10565b610b615760405162461bcd60e51b815260040161059990612b24565b6010546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3601080546001600160a01b0319169055565b6012546001600160a01b03163314610bd55760405162461bcd60e51b815260040161059990612bb4565b60008181526014602052604090205460ff16610c035760405162461bcd60e51b815260040161059990612ac4565b6001600160a01b03909116600090815260026020908152604080832093835292905220805460ff19166001179055565b60606000610c4083610af4565b905080610c5d5750506040805160008152602081019091526104d6565b606081604051908082528060200260200182016040528015610c89578160200160208202803883390190505b50905060005b82811015610cc057610ca18582610703565b828281518110610cad57fe5b6020908102919091010152600101610c8f565b5091506104d69050565b60608083839050604051908082528060200260200182016040528015610d0a57816020015b610cf7611c6f565b815260200190600190039081610cef5790505b50905060005b83811015610db5576003858583818110610d2657fe5b9050602002013581548110610d3757fe5b90600052602060002090600702016040518060e0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481525050828281518110610da257fe5b6020908102919091010152600101610d10565b509392505050565b610dc5610e10565b610de15760405162461bcd60e51b815260040161059990612b24565b600091825260146020526040909120805460ff1916911515919091179055565b6010546001600160a01b031690565b6010546000906001600160a01b0316610e2761124c565b6001600160a01b031614905090565b600d8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105675780601f1061053c57610100808354040283529160200191610567565b610e9f61124c565b6001600160a01b0316826001600160a01b03161415610ed05760405162461bcd60e51b815260040161059990612aa4565b8060076000610edd61124c565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610f2161124c565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610f599190612a35565b60405180910390a35050565b6012546001600160a01b031681565b610f85610f7f61124c565b83611250565b610fa15760405162461bcd60e51b815260040161059990612b84565b610fad84848484611328565b50505050565b610fbb610e10565b610fd75760405162461bcd60e51b815260040161059990612b24565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b60606110048261122f565b6110205760405162461bcd60e51b815260040161059990612b44565b6000828152600f602090815260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452606093928301828280156110b55780601f1061108a576101008083540402835291602001916110b5565b820191906000526020600020905b81548152906001019060200180831161109857829003601f168201915b505050505090508051600014156110dc5750506040805160208101909152600081526104d6565b600e816040516020016110f0929190612994565b6040516020818303038152906040529150506104d6565b6003818154811061111457fe5b90600052602060002090600702016000915090508060000154908060010154908060020154908060030154908060040154908060050154908060060154905087565b61115e610e10565b61117a5760405162461bcd60e51b815260040161059990612b24565b601355565b611187610e10565b6111a35760405162461bcd60e51b815260040161059990612b24565b601280546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b6111fb610e10565b6112175760405162461bcd60e51b815260040161059990612b24565b61098f8161135b565b6011546001600160a01b031681565b6000908152600460205260409020546001600160a01b0316151590565b3390565b600061125b8261122f565b6112775760405162461bcd60e51b815260040161059990612ab4565b600061128283610a5e565b9050806001600160a01b0316846001600160a01b031614806112bd5750836001600160a01b03166112b284610572565b6001600160a01b0316145b806112cd57506112cd81856111c5565b949350505050565b6112e08383836113dd565b6112ea83826115d6565b6106fe82826116cb565b61130e828260405180602001604052806000815250611709565b5050565b61098f61131e82610a5e565b8261173c565b5490565b6113338484846112d5565b61133f84848484611784565b610fad5760405162461bcd60e51b815260040161059990612a64565b6001600160a01b0381166113815760405162461bcd60e51b815260040161059990612a74565b6010546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3601080546001600160a01b0319166001600160a01b0392909216919091179055565b826001600160a01b03166113f082610a5e565b6001600160a01b0316146114165760405162461bcd60e51b815260040161059990612b34565b6001600160a01b03821661143c5760405162461bcd60e51b815260040161059990612a94565b60006003828154811061144b57fe5b600091825260208083206007909202909101546001600160a01b038716835260028252604080842082855290925291205490915060ff1615806114b057506001600160a01b038416600090815260016020818152604080842085855290915290912054115b6114cc5760405162461bcd60e51b815260040161059990612b54565b6114d5826118be565b6001600160a01b03841660009081526006602052604090206114f6906118f9565b6001600160a01b038316600090815260066020526040902061151790611910565b600082815260046020908152604080832080546001600160a01b0319166001600160a01b03888116919091179091558716835260018083528184208585529092529091205461156591611919565b6001600160a01b03808616600081815260016020818152604080842088855282528084209690965593881680835281855285832087845290945284822080549091019055925185937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a450505050565b6001600160a01b03821660009081526008602052604081205461160090600163ffffffff61191916565b60008381526009602052604090205490915080821461169b576001600160a01b038416600090815260086020526040812080548490811061163d57fe5b906000526020600020015490508060086000876001600160a01b03166001600160a01b03168152602001908152602001600020838154811061167b57fe5b600091825260208083209091019290925591825260099052604090208190555b6001600160a01b03841660009081526008602052604090208054906116c4906000198301611cac565b5050505050565b6001600160a01b0390911660009081526008602081815260408084208054868652600984529185208290559282526001810183559183529091200155565b6117138383611962565b6117206000848484611784565b6106fe5760405162461bcd60e51b815260040161059990612a64565b611746828261197f565b6000818152600f6020526040902054600260001961010060018416150201909116041561130e576000818152600f6020526040812061130e91611cd0565b6000611798846001600160a01b03166119ab565b6117a4575060016112cd565b600060606001600160a01b038616630a85bd0160e11b6117c261124c565b8988886040516024016117d894939291906129cf565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516118169190612988565b6000604051808303816000865af19150503d8060008114611853576040519150601f19603f3d011682016040523d82523d6000602084013e611858565b606091505b50915091508161188a578051156118725780518082602001fd5b60405162461bcd60e51b815260040161059990612a64565b6000818060200190516118a09190810190611fe0565b6001600160e01b031916630a85bd0160e11b1493506112cd92505050565b6000818152600560205260409020546001600160a01b03161561098f57600090815260056020526040902080546001600160a01b0319169055565b805461190c90600163ffffffff61191916565b9055565b80546001019055565b600061195b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506119e4565b9392505050565b61196c8282611a10565b61197682826116cb565b61130e81611ad7565b6119898282611b1b565b61199382826115d6565b60008181526009602052604081205561130e81611bd3565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906112cd575050151592915050565b60008184841115611a085760405162461bcd60e51b81526004016105999190612a43565b505050900390565b6001600160a01b038216611a365760405162461bcd60e51b815260040161059990612b04565b611a3f8161122f565b15611a5c5760405162461bcd60e51b815260040161059990612a84565b600081815260046020908152604080832080546001600160a01b0319166001600160a01b038716908117909155835260069091529020611a9b90611910565b60405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b816001600160a01b0316611b2e82610a5e565b6001600160a01b031614611b545760405162461bcd60e51b815260040161059990612ba4565b611b5d816118be565b6001600160a01b0382166000908152600660205260409020611b7e906118f9565b60008181526004602052604080822080546001600160a01b0319169055518291906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600a54600090611bea90600163ffffffff61191916565b6000838152600b6020526040812054600a8054939450909284908110611c0c57fe5b9060005260206000200154905080600a8381548110611c2757fe5b6000918252602080832090910192909255828152600b90915260409020829055600a805490611c5a906000198301611cac565b505050600091825250600b6020526040812055565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8154818355818111156106fe576000838152602090206106fe918101908301611d10565b50805460018160011615610100020316600290046000825580601f10611cf6575061098f565b601f01602090049060005260206000209081019061098f91905b61056f91905b80821115611d2a5760008155600101611d16565b5090565b803561075e81612d33565b60008083601f840112611d4b57600080fd5b50813567ffffffffffffffff811115611d6357600080fd5b602083019150836020820283011115611d7b57600080fd5b9250929050565b803561075e81612d47565b803561075e81612d50565b805161075e81612d50565b600082601f830112611db457600080fd5b8135611dc7611dc282612c81565b612c5a565b91508082526020830160208301858383011115611de357600080fd5b611dee838284612cf1565b50505092915050565b803561075e81612d59565b600060208284031215611e1457600080fd5b60006112cd8484611d2e565b60008060408385031215611e3357600080fd5b6000611e3f8585611d2e565b9250506020611e5085828601611d2e565b9150509250929050565b600080600060608486031215611e6f57600080fd5b6000611e7b8686611d2e565b9350506020611e8c86828701611d2e565b9250506040611e9d86828701611df7565b9150509250925092565b60008060008060808587031215611ebd57600080fd5b6000611ec98787611d2e565b9450506020611eda87828801611d2e565b9350506040611eeb87828801611df7565b925050606085013567ffffffffffffffff811115611f0857600080fd5b611f1487828801611da3565b91505092959194509250565b60008060408385031215611f3357600080fd5b6000611f3f8585611d2e565b9250506020611e5085828601611d82565b60008060408385031215611f6357600080fd5b6000611f6f8585611d2e565b9250506020611e5085828601611df7565b60008060208385031215611f9357600080fd5b823567ffffffffffffffff811115611faa57600080fd5b611fb685828601611d39565b92509250509250929050565b600060208284031215611fd457600080fd5b60006112cd8484611d8d565b600060208284031215611ff257600080fd5b60006112cd8484611d98565b60006020828403121561201057600080fd5b60006112cd8484611df7565b6000806040838503121561202f57600080fd5b6000611f3f8585611df7565b600061204783836128ef565b505060e00190565b600061205b838361296e565b505060200190565b61206c81612cc8565b82525050565b600061207d82612cbb565b6120878185612cbf565b935061209283612ca9565b8060005b838110156120c05781516120aa888261203b565b97506120b583612ca9565b925050600101612096565b509495945050505050565b60006120d682612cbb565b6120e08185612cbf565b93506120eb83612ca9565b8060005b838110156120c0578151612103888261204f565b975061210e83612ca9565b9250506001016120ef565b61206c81612cd3565b600061212d82612cbb565b6121378185612cbf565b9350612147818560208601612cfd565b61215081612d29565b9093019392505050565b600061216582612cbb565b61216f81856104d6565b935061217f818560208601612cfd565b9290920192915050565b6000815460018116600081146121a657600181146121c957612208565b607f60028304166121b781876104d6565b60ff1984168152955085019250612208565b600282046121d781876104d6565b95506121e285612caf565b60005b82811015612201578154888201526001909101906020016121e5565b5050850192505b505092915050565b600061221d602b83612cbf565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7581526a74206f6620626f756e647360a81b602082015260400192915050565b600061226a603283612cbf565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527131b2b4bb32b91034b6b83632b6b2b73a32b960711b602082015260400192915050565b60006122be602683612cbf565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b6000612306601c83612cbf565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000815260200192915050565b600061233f602483612cbf565b7f4552433732313a207472616e7366657220746f20746865207a65726f206164648152637265737360e01b602082015260400192915050565b6000612385601983612cbf565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000815260200192915050565b60006123be602c83612cbf565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657881526b34b9ba32b73a103a37b5b2b760a11b602082015260400192915050565b600061240c600f83612cbf565b6e125b9d985b1a5908141b185b9b995d608a1b815260200192915050565b6000612437603883612cbf565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7781527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015260400192915050565b6000612496602a83612cbf565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a65815269726f206164647265737360b01b602082015260400192915050565b60006124e2602983612cbf565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737481526832b73a103a37b5b2b760b91b602082015260400192915050565b600061252d602083612cbf565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373815260200192915050565b6000612566602c83612cbf565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657881526b34b9ba32b73a103a37b5b2b760a11b602082015260400192915050565b60006125b4602083612cbf565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572815260200192915050565b60006125ed602983612cbf565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206981526839903737ba1037bbb760b91b602082015260400192915050565b6000612638602f83612cbf565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f81526e3732bc34b9ba32b73a103a37b5b2b760891b602082015260400192915050565b6000612689603183612cbf565b7f596f75206d75737420776974686472617720616c6c204c5020746f6b656e20668152701c9bdb4811985c9b5a5b99c8199a5c9cdd607a1b602082015260400192915050565b60006126dc602183612cbf565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e658152603960f91b602082015260400192915050565b600061271f601583612cbf565b74496e76616c696420706c616e6e65742076616c756560581b815260200192915050565b6000612750603183612cbf565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f8152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b602082015260400192915050565b60006127a3602c83612cbf565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f81526b7574206f6620626f756e647360a01b602082015260400192915050565b60006127f1602583612cbf565b7f4552433732313a206275726e206f6620746f6b656e2074686174206973206e6f8152643a1037bbb760d91b602082015260400192915050565b6000612838601983612cbf565b7f53656e646572206d7573742062652047656d466163746f727900000000000000815260200192915050565b6000612871603083612cbf565b7f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7781526f1b995c881b9bdc88185c1c1c9bdd995960821b602082015260400192915050565b60006128c3601783612cbf565b7f446566692057617272696f723a20466f7262696464656e000000000000000000815260200192915050565b805160e0830190612900848261296e565b506020820151612913602085018261296e565b506040820151612926604085018261296e565b506060820151612939606085018261296e565b50608082015161294c608085018261296e565b5060a082015161295f60a085018261296e565b5060c0820151610fad60c08501825b61206c8161056f565b61206c6129838261056f565b61056f565b600061195b828461215a565b60006129a08285612189565b91506112cd828461215a565b60006129b88284612977565b50602001919050565b6020810161075e8284612063565b608081016129dd8287612063565b6129ea6020830186612063565b6129f7604083018561296e565b8181036060830152612a098184612122565b9695505050505050565b6020808252810161195b8184612072565b6020808252810161195b81846120cb565b6020810161075e8284612119565b6020808252810161195b8184612122565b6020808252810161075e81612210565b6020808252810161075e8161225d565b6020808252810161075e816122b1565b6020808252810161075e816122f9565b6020808252810161075e81612332565b6020808252810161075e81612378565b6020808252810161075e816123b1565b6020808252810161075e816123ff565b6020808252810161075e8161242a565b6020808252810161075e81612489565b6020808252810161075e816124d5565b6020808252810161075e81612520565b6020808252810161075e81612559565b6020808252810161075e816125a7565b6020808252810161075e816125e0565b6020808252810161075e8161262b565b6020808252810161075e8161267c565b6020808252810161075e816126cf565b6020808252810161075e81612712565b6020808252810161075e81612743565b6020808252810161075e81612796565b6020808252810161075e816127e4565b6020808252810161075e8161282b565b6020808252810161075e81612864565b6020808252810161075e816128b6565b6020810161075e828461296e565b60e08101612c00828a61296e565b612c0d602083018961296e565b612c1a604083018861296e565b612c27606083018761296e565b612c34608083018661296e565b612c4160a083018561296e565b612c4e60c083018461296e565b98975050505050505050565b60405181810167ffffffffffffffff81118282101715612c7957600080fd5b604052919050565b600067ffffffffffffffff821115612c9857600080fd5b506020601f91909101601f19160190565b60200190565b60009081526020902090565b5190565b90815260200190565b600061075e82612ce5565b151590565b6001600160e01b03191690565b6001600160a01b031690565b82818337506000910152565b60005b83811015612d18578181015183820152602001612d00565b83811115610fad5750506000910152565b601f01601f191690565b612d3c81612cc8565b811461098f57600080fd5b612d3c81612cd3565b612d3c81612cd8565b612d3c8161056f56fea365627a7a72315820dc7e2fe54beb00d7c85c4a52c65bca3d516fceb5442a92bb302a1e4b4a6fb5d46c6578706572696d656e74616cf564736f6c63430005100040";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_ATTRIBUTES = "attributes";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BASEURI = "baseURI";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_GEMFACTORY = "gemFactory";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETWARRIORS = "getWarriors";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_NUMWARRIORINCLAN = "numWarriorInClan";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_ROUTER = "router";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETGEMFACTORY = "setGemFactory";

    public static final String FUNC_SETMAXTRIBE = "setMaxTribe";

    public static final String FUNC_SETROUTER = "setRouter";

    public static final String FUNC_STARTFARMING = "startFarming";

    public static final String FUNC_STOPFARMING = "stopFarming";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TOKENSOFOWNER = "tokensOfOwner";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPDATEPLANNET = "updatePlannet";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected DefiWarrior(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DefiWarrior(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DefiWarrior(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DefiWarrior(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> attributes(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ATTRIBUTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> baseURI() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BASEURI, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burn(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> gemFactory() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GEMFACTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> getWarriors(List<BigInteger> ids) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETWARRIORS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Attribute>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isOwner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String tokenOwner, BigInteger plannet) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, tokenOwner), 
                new org.web3j.abi.datatypes.generated.Uint256(plannet)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> numWarriorInClan(String param0, BigInteger param1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NUMWARRIORINCLAN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> router() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ROUTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String to, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setGemFactory(String _gemFactory) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETGEMFACTORY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _gemFactory)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setMaxTribe(BigInteger _maxTribe) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETMAXTRIBE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_maxTribe)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setRouter(String _router) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETROUTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _router)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> startFarming(String user, BigInteger plannet) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_STARTFARMING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, user), 
                new org.web3j.abi.datatypes.generated.Uint256(plannet)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> stopFarming(String user, BigInteger plannet) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_STOPFARMING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, user), 
                new org.web3j.abi.datatypes.generated.Uint256(plannet)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> tokenByIndex(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tokenOfOwnerByIndex(String owner, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENOFOWNERBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> tokensOfOwner(String _owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENSOFOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updatePlannet(BigInteger _plannetIdx, Boolean _allowed) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEPLANNET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_plannetIdx), 
                new org.web3j.abi.datatypes.Bool(_allowed)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static DefiWarrior load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DefiWarrior(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DefiWarrior load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DefiWarrior(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DefiWarrior load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DefiWarrior(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DefiWarrior load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DefiWarrior(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DefiWarrior> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String name, String symbol) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol)));
        return deployRemoteCall(DefiWarrior.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<DefiWarrior> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String name, String symbol) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol)));
        return deployRemoteCall(DefiWarrior.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DefiWarrior> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String name, String symbol) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol)));
        return deployRemoteCall(DefiWarrior.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DefiWarrior> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String name, String symbol) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol)));
        return deployRemoteCall(DefiWarrior.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
